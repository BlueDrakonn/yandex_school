package com.example.bankapp.mock.repository

import com.example.bankapp.domain.model.Account
import com.example.bankapp.domain.model.Category
import com.example.bankapp.domain.model.Transaction
import com.example.bankapp.domain.repository.Repository
import java.time.LocalDate

import java.time.LocalDateTime
import java.time.YearMonth

class MockRepository : Repository {

    private val mockTransactions = listOf(
        Transaction(
            id = 1,
            accountId = 1,
            categoryId = 4,
            amount = 5100.0,
            transactionDate = LocalDateTime.now(),
            comment = "–ü–æ–∫—É–ø–∫–∞ –µ–¥—ã",
            createdAt = LocalDateTime.now(),
            updatedAt = LocalDateTime.now()
        ),
        Transaction(
            id = 2,
            accountId = 1,
            categoryId = 3,
            amount = 1200.0,
            transactionDate = LocalDateTime.now().minusDays(20),
            comment = "–ö—É—Ä—Ç–∫–∞",
            createdAt = LocalDateTime.now().minusDays(20),
            updatedAt = LocalDateTime.now().minusDays(19)
        ),
        Transaction(
            id = 3,
            accountId = 2,
            categoryId = 1,
            amount = 3000.0,
            transactionDate = LocalDateTime.now(),
            comment = "–ó–∞—Ä–ø–ª–∞—Ç–∞",
            createdAt = LocalDateTime.now(),
            updatedAt = LocalDateTime.now()
        ),
        Transaction(
            id = 4,
            accountId = 1,
            categoryId = 4,
            amount = 750.0,
            transactionDate = LocalDateTime.now(),
            createdAt = LocalDateTime.now(),
            updatedAt = LocalDateTime.now()
        ),
        Transaction(
            id = 5,
            accountId = 1,
            categoryId = 5,
            amount = 300.0,
            transactionDate = LocalDateTime.now(),
            createdAt = LocalDateTime.now(),
            updatedAt = LocalDateTime.now()
        ),
        Transaction(
            id = 6,
            accountId = 1,
            categoryId = 1,
            amount = 3050.0,
            transactionDate = LocalDateTime.now(),
            comment = "–†–µ–º–æ–Ω—Ç –∫—Ä–∞–Ω–∞",
            createdAt = LocalDateTime.now(),
            updatedAt = LocalDateTime.now()
        )
    )


    override suspend fun getAccounts(): List<Account> {
        return listOf(
            Account(
                id = 1,
                userId = 1,
                name = "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç",
                balance = 100000.0,
                currency = "RUB",
                createdAt = LocalDateTime.now().minusDays(10),
                updatedAt = LocalDateTime.now()
            ),
            Account(
                id = 2,
                userId = 1,
                name = "USD –°—á—ë—Ç",
                balance = 2500.0,
                currency = "USD",
                createdAt = LocalDateTime.now().minusDays(30),
                updatedAt = LocalDateTime.now()
            )
        )
    }

    override suspend fun getCategories(): List<Category> {
        return listOf(

            Category(id = 1, name = "–ó–∞—Ä–ø–ª–∞—Ç–∞", emoji = "üí∞", isIncome = true),
            Category(id = 2, name = "–§—Ä–∏–ª–∞–Ω—Å", emoji = "üßë‚Äçüíª", isIncome = true),
            Category(id = 3, name = "–ü–æ–¥–∞—Ä–æ–∫", emoji = "üéÅ", isIncome = true),


            Category(id = 4, name = "–ü—Ä–æ–¥—É–∫—Ç—ã", emoji = "üçé", isIncome = false),
            Category(id = 5, name = "–ö–∞—Ñ–µ", emoji = "‚òï", isIncome = false),
            Category(id = 6, name = "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", emoji = "üöó", isIncome = false),
            Category(id = 7, name = "–û–¥–µ–∂–¥–∞", emoji = "üëï", isIncome = false),
            Category(id = 8, name = "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", emoji = "üéÆ", isIncome = false),
            Category(id = 9, name = "–ú–µ–¥–∏—Ü–∏–Ω–∞", emoji = "üíä", isIncome = false),
            Category(id = 10, name = "–ê—Ä–µ–Ω–¥–∞", emoji = "üè†", isIncome = false),
            Category(id = 11, name = "–†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã", emoji = "—Ä–∫", isIncome = false)
        )
    }

    override suspend fun getTransactionsByAccount(
        accountId: Int,
        startDate: LocalDate?,
        endDate: LocalDate?
    ): List<Transaction> {
        val start = startDate ?: YearMonth.now().atDay(1)
        val end = endDate ?: YearMonth.now().atEndOfMonth()

        return mockTransactions.filter {
            it.accountId == accountId &&
                    it.transactionDate.toLocalDate() in start..end
        }
    }
}
